%import common (WS, DIGIT, INT, FLOAT, SH_COMMENT)
%import common.ESCAPED_STRING -> STRING

%ignore WS
%ignore SH_COMMENT

LETTER_UPPER_CASE: "A".."Z"
LETTER_LOWER_CASE: "a".."z"
LETTER: LETTER_UPPER_CASE | LETTER_LOWER_CASE | DIGIT | "_"

NODE_KIND: LETTER_UPPER_CASE LETTER*
IDENTIFIER: LETTER_LOWER_CASE LETTER*

COMPARISON: "==" | "!=" | "<=" | ">=" | "<" | ">" | "*=" | "**="
QUANTIFIER: "all:" | "any:" | "one:"
AGGREGATOR.1: "min" | "max" | "sum" | "avg"
QUALIFIER.1: "final" | "const" | "var"

?expression: expression_bool

?expression_bool: expression_comp
  | expression_comp "&&" expression_comp -> expression_binary
  | expression_comp "||" expression_comp -> expression_binary

?expression_comp: expression_sum
  | expression_sum COMPARISON expression_sum -> expression_binary

?expression_sum: expression_prod
  | expression_sum "+" expression_prod -> expression_binary
  | expression_sum "-" expression_prod -> expression_binary

?expression_prod: expression_unary
  | expression_prod "*" expression_unary  -> expression_binary
  | expression_prod "/" expression_unary  -> expression_binary
  | expression_prod "//" expression_unary -> expression_binary

?expression_unary: expression_atom
  | "!" expression_unary
  | "-" expression_unary

?expression_atom: INT         -> expression_int
  | FLOAT                     -> expression_float
  | STRING                    -> expression_str
  | "true"                    -> expression_true
  | "false"                   -> expression_false
  | "none"                    -> expression_none
  | IDENTIFIER                -> expression_ref
  | NODE_KIND                 -> expression_kind
  | call                      -> expression_call
  | IDENTIFIER "." IDENTIFIER -> expression_attr
  | "(" expression ")"        -> expression_group

_list{item}: | item ("," item)*
_c_list{item}: "," _list{item}

call: IDENTIFIER "(" _list{expression} ")"
label: IDENTIFIER ":"

c_statement: c_block ";"                 -> c_statement_block
  | IDENTIFIER COMPARISON expression ";" -> c_statement_attr
  | [label] call NODE_KIND [c_block] ";" -> c_statement_with
  | [label] call call ";"                -> c_statement_call

p_statement: p_block ";"                                   -> p_statement_block
  | "size" COMPARISON expression ";"                       -> p_statement_size
  | AGGREGATOR "(" NODE_KIND ")" COMPARISON expression ";" -> p_statement_aggr

f_statement: f_block                         -> f_statement_block
  | QUALIFIER IDENTIFIER "=" expression ";"  -> f_statement_define
  | IDENTIFIER "=" expression ";"            -> f_statement_assign
  | "return" [expression] ";"                -> f_statement_return
  | "if" expression f_block ["else" f_block] -> f_statement_if
  | "for" IDENTIFIER "in" expression f_block -> f_statement_for
  | "fail" expression ";"                    -> f_statement_fail

c_block: "{" QUANTIFIER c_statement* "}"
p_block: "{" QUANTIFIER p_statement* "}"
f_block: "{" f_statement* "}"

?definition: "con" "main" c_block                                   -> c_definition_main
  | "con" IDENTIFIER "(" NODE_KIND _c_list{IDENTIFIER}? ")" c_block -> c_definition_type
  | "con" IDENTIFIER "(" "list" _c_list{IDENTIFIER}? ")" p_block    -> p_definition
  | "fun" IDENTIFIER "(" _list{IDENTIFIER} ")" f_block              -> f_definition
  | "map" IDENTIFIER ["if" _list{IDENTIFIER}] f_block               -> m_definition

include: "/include/" STRING ";"

start: (include | definition)*
