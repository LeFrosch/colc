%import common.WS
%import common.ESCAPED_STRING -> STRING

%ignore WS

DIGIT: "0".."9"

INTEGER: DIGIT+
LETTER_UPPER_CASE: "A".."Z"
LETTER_LOWER_CASE: "a".."z"
LETTER: LETTER_UPPER_CASE | LETTER_LOWER_CASE | DIGIT

MAIN: "main"
TYPE: "str" | "int" | "bool"
NODE_KIND: LETTER_UPPER_CASE LETTER*
IDENTIFIER: LETTER_LOWER_CASE LETTER*

COMPARISON: "==" | "!=" | "<=" | ">=" | "<" | ">" | "*=" | "**="
QUANTIFIER: "all:" | "any:" | "one:"
AGGREGATOR: "min" | "max" | "sum" | "avg"

?expression: expression_sum

?expression_sum: expression_prod
  | expression_sum "+" expression_prod -> expression_add
  | expression_sum "-" expression_prod -> expression_sub

?expression_prod: expression_atom
  | expression_prod "*" expression_atom -> expression_mul
  | expression_prod "/" expression_atom -> expression_div

?expression_atom: INTEGER      -> expression_int
  | STRING                     -> expression_str
  | "-" expression_atom        -> expression_neg
  | IDENTIFIER                 -> expression_ref
  | call                       -> expression_call
  | "(" expression_sum ")"

_list{item}: | item ("," item)*
_c_list{item}: "," _list{item}

parameter: IDENTIFIER ":" TYPE
call: IDENTIFIER "(" _list{expression} ")"

c_statement: c_block ";"                 -> c_statement_block
  | call NODE_KIND [c_block] ";"         -> c_statement_with
  | IDENTIFIER COMPARISON expression ";" -> c_statement_attr
  | call call ";"                        -> c_statement_call

p_statement: p_block ";"                                   -> p_statement_block
  | "size" COMPARISON expression ";"                       -> p_statement_size
  | AGGREGATOR "(" NODE_KIND ")" COMPARISON expression ";" -> p_statement_aggr

f_statement: f_block ";"          -> f_statement_block
  | IDENTIFIER "=" expression ";" -> f_statement_assign
  | "return" expression ";"       -> f_statement_ret

c_block: "{" QUANTIFIER c_statement* "}"
p_block: "{" QUANTIFIER p_statement* "}"
f_block: "{" f_statement* "}"

?definition: "con" MAIN c_block                                    -> c_definition_main
  | "con" IDENTIFIER "(" NODE_KIND _c_list{parameter}? ")" c_block -> c_definition_type
  | "con" IDENTIFIER "(" "list" _c_list{parameter}? ")" p_block    -> p_definition
  | "fun" IDENTIFIER "(" _list{parameter} ")" f_block              -> f_definition

include: "/include/" STRING ";"

start: (include | definition)*
